if !filereadable(glob("~/.vim/autoload/plug.vim"))
  !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
call plug#begin('~/.vim/plugged')

" Github Bundles
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-unimpaired'
Plug 'bling/vim-airline'
Plug 'vim-scripts/vimwiki'
Plug 'nanotech/jellybeans.vim'
Plug 'sjl/badwolf'
Plug 'sjl/gundo.vim'
Plug 'vim-scripts/taglist.vim'
Plug 'othree/html5.vim'
Plug 'plasticboy/vim-markdown'
Plug 'rking/ag.vim'
Plug 'wikitopian/hardmode'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'Lokaltog/vim-easymotion'
Plug 'Shougo/unite.vim'
Plug 'tsukkee/unite-tag'

" Formatting
Plug 'Chiel92/vim-autoformat'
au BufWrite * :Autoformat
let g:autoformat_autoindent = 0

" Completion
Plug 'Shougo/neocomplete.vim'
let g:neocomplete#enable_at_startup = 1

" Dash
Plug 'rizzatti/funcoo.vim'
Plug 'rizzatti/dash.vim'

" Haskell
Plug 'eagletmt/ghcmod-vim'
Plug 'dag/vim2hs'
Plug 'eagletmt/neco-ghc'
Plug 'Twinside/vim-haskellFold'
Plug 'Shougo/vimproc', { 'do': 'make' }
" autocmd BufWritePost *.hs GhcModCheckAndLintAsync
" autocmd FileType haskell noremap <buffer> <leader>q :GhcModType<cr>

" Elm
Plug 'lambdatoast/elm.vim'

" Erlang
" Plug 'oscarh/vimerl'

" Elixir
Plug 'elixir-lang/vim-elixir'
" Plug 'mattonrails/vim-mix.git'
autocmd FileType elixir noremap <buffer> <leader>t :!mix test<cr>

" Julia
Plug 'JuliaLang/julia-vim'

" Python
" Plug 'davidhalter/jedi-vim'
Plug 'klen/python-mode'
Plug 'ivanov/vim-ipython'
Plug 'hylang/vim-hy'
" let g:pymode_rope = 0
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#goto_assignments_command = "<leader>ga"
let g:jedi#goto_definitions_command = "<leader>gd"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-n>"
let g:jedi#rename_command = "<leader>r"
let g:jedi#show_call_signatures = "1"
" let g:jedi#popup_on_dot = 0

" Rust
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'
set hidden
let g:racer_cmd = "/Users/mjs2600/Code/Personal/Rust/racer/target/release/racer"
let $RUST_SRC_PATH="/Users/mjs2600/Code/Personal/Rust/rust/src/"


" LaTeX
Plug 'lervag/vim-latex'
let g:tex_flavor='pdflatex'
let g:Tex_DefaultTargetFormat = 'pdf'

" Web
Plug 'mattn/emmet-vim'
Plug 'nono/vim-handlebars'
Plug 'burnettk/vim-angular'
Plug 'kchmck/vim-coffee-script'
Plug 'wookiehangover/jshint.vim'
Plug 'marijnh/tern_for_vim', { 'do': 'npm install -g' }
autocmd BufRead,BufNewFile *.litcoffee set filetype=markdown

" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'thoughtbot/vim-rspec'
Plug 'noprompt/vim-yardoc'
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:rspec_runner = "os_x_iterm2"
" let g:rspec_command = '!bundle exec rspec --drb {spec}'
let g:rspec_command = '!bundle exec rspec {spec}'
autocmd FileType ruby noremap <buffer> <leader>t :call RunCurrentSpecFile()<CR>

highlight Pmenu ctermbg=238 gui=bold

autocmd BufEnter * inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
autocmd BufEnter * inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
autocmd BufWritePre * :%s/\s\+$//e
autocmd BufReadPost * normal `"

" Shell
Plug 'dag/vim-fish'

call plug#end()

" Unite
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#source('file_rec/async','sorters','sorter_rank')

" Style
filetype plugin indent on     " required!
highlight Pmenu ctermbg=238 gui=bold

"let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_mode_map={ 'mode': 'active', 'active_filetypes': [], 'passive_filetypes': ['html', 'vimwiki', 'vim'] }
let g:SuperTabDefaultCompletionType = "context"
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
"let g:airline_left_sep=''
"let g:airline_right_sep=''

set vb
set guifont=Inconsolata\ for\ Powerline:h14
set guioptions-=T  "remove toolbar
set t_Co=256
set expandtab
set shiftwidth=2
set softtabstop=2
set ignorecase
set smartcase
set hlsearch
set incsearch
set rnu
set number
set background=dark
set encoding=utf-8 " Necessary to show Unicode glyphs
set list listchars=tab:>>,eol:¬,trail:·
set wildmenu
set wildmode=full
set omnifunc=syntaxcomplete#Complete
set clipboard=unnamed
set cursorline
set cursorcolumn
set undofile
set undodir=~/.vim/undo
set shell=zsh
set linespace=0 " For Airline
set mouse=a

if !has('nvim')
  set cm=blowfish
endif

nnoremap Y y$

noremap <silent> <Right> <c-w>l
noremap <silent> <Left> <c-w>h
noremap <silent> <Up> <c-w>k
noremap <silent> <Down> <c-w>j

let mapleader = ' '
noremap <silent><leader>q :Dash<CR>
noremap <leader>f :Unite buffer file_rec/async -start-insert<CR>
noremap <silent> <leader>c mpgg=G<CR>:%s/\s\+$//g<CR>`p
noremap <leader>d :NERDTreeToggle<CR>
noremap <leader>b :Unite buffer -start-insert<CR>
noremap <leader>t :TlistToggle<CR>
noremap <leader>u :GundoToggle<CR>
noremap <leader>w :w<CR>
noremap <leader>s :Ag<space>
noremap <leader>$ :setlocal spell! spelllang=en_us<CR>
noremap <leader>; :UltiSnipsEdit<CR>
noremap <leader>. :e ~/.vimrc<CR>
noremap <leader>gd :Unite tag -start-insert<CR>

nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

syntax enable
colorscheme badwolf

hi Normal ctermbg=none
hi Nontext ctermbg=none

" Clear the search buffer when hitting return
function! MapCR()
  nnoremap <leader><cr> :nohlsearch<cr>
endfunction
call MapCR()

" Use space to toggle folds
"nnoremap <space> za
nnoremap <leader>z za
vnoremap <leader>z zf

" Make vim very magic
" nnoremap / /\v

" Snippets
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-l>"
let g:UltiSnipsJumpBackwardTrigger="<c-h>"
let g:UltiSnipsListSnippets="<c-k>"

" PlugUpdate
