if !isdirectory(glob("~/.vim/bundle/neobundle.vim/"))
  !curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh
endif

if !isdirectory(glob("~/.vim/bundle/Vundle.vim/"))
  !git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
endif

silent !mkdir -p ~/.vim/undo > /dev/null 2>&1

if has('vim_starting')
  set nocompatible               " be iMproved
  set rtp+=~/.vim/bundle/neobundle.vim/
endif

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

" Github Bundles
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-sensible'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'bling/vim-airline'
NeoBundle 'vim-scripts/vimwiki'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'sjl/badwolf'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'vim-scripts/taglist.vim'
NeoBundle 'othree/html5.vim'
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'rking/ag.vim'
NeoBundle 'wikitopian/hardmode'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'Shougo/unite.vim'

" Completion
NeoBundle 'Shougo/neocomplete.vim'
let g:neocomplete#enable_at_startup = 1

" Dash
NeoBundle 'rizzatti/funcoo.vim'
NeoBundle 'rizzatti/dash.vim'

" Haskell
NeoBundle 'eagletmt/ghcmod-vim'
NeoBundle 'dag/vim2hs'
NeoBundle 'eagletmt/neco-ghc'
NeoBundle 'Twinside/vim-haskellFold'
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
autocmd BufWritePost *.hs GhcModCheckAndLintAsync
autocmd FileType haskell noremap <buffer> <leader>q :GhcModType<cr>

" Elm
NeoBundle 'lambdatoast/elm.vim'

" Erlang
" NeoBundle 'oscarh/vimerl'

" Elixir
NeoBundle 'elixir-lang/vim-elixir'
NeoBundle 'mattonrails/vim-mix.git'
autocmd FileType elixir noremap <buffer> <leader>t :!mix test<cr>

" Julia
NeoBundle 'JuliaLang/julia-vim'

" Python
" NeoBundle 'davidhalter/jedi-vim'
NeoBundle 'klen/python-mode'
NeoBundle 'ivanov/vim-ipython'
NeoBundle 'hylang/vim-hy'
" let g:pymode_rope = 0
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#goto_assignments_command = "<leader>ga"
let g:jedi#goto_definitions_command = "<leader>gd"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-n>"
let g:jedi#rename_command = "<leader>r"
let g:jedi#show_call_signatures = "1"
" let g:jedi#popup_on_dot = 0

" Rust
NeoBundle 'wting/rust.vim'

" LaTeX
NeoBundle 'lervag/vim-latex'
let g:tex_flavor='pdflatex'
let g:Tex_DefaultTargetFormat = 'pdf'

" Web
NeoBundle 'mattn/emmet-vim'
NeoBundle 'nono/vim-handlebars'
NeoBundle 'burnettk/vim-angular'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'wookiehangover/jshint.vim'
NeoBundle 'marijnh/tern_for_vim', { 'build': { 'mac': 'npm install' } }
" NeoBundle 'marijnh/tern_for_vim'
autocmd BufRead,BufNewFile *.litcoffee set filetype=markdown

" Ruby
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'tpope/vim-rails'
NeoBundle 'thoughtbot/vim-rspec'
NeoBundle 'ngmy/vim-rubocop'
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
let g:syntastic_ruby_checkers = ['mri', 'rubocop']

highlight Pmenu ctermbg=238 gui=bold

autocmd BufEnter * inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
autocmd BufEnter * inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
autocmd BufWritePre * :%s/\s\+$//e
autocmd BufReadPost * normal `"

" Shell
NeoBundle 'dag/vim-fish'

call neobundle#end()

" Unite
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#source('file_rec/async','sorters','sorter_rank')

" Style
filetype plugin indent on     " required!
highlight Pmenu ctermbg=238 gui=bold

"let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_mode_map={ 'mode': 'active', 'active_filetypes': [], 'passive_filetypes': ['html', 'vimwiki', 'vim'] }
let g:SuperTabDefaultCompletionType = "context"
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
"let g:airline_left_sep=''
"let g:airline_right_sep=''

set vb
set guifont=Inconsolata\ for\ Powerline:h14
set guioptions-=T  "remove toolbar
set t_Co=256
set expandtab
set shiftwidth=2
set softtabstop=2
set ignorecase
set smartcase
set hlsearch
set incsearch
set rnu
set number
set background=dark
set encoding=utf-8 " Necessary to show Unicode glyphs
set list listchars=tab:>>,eol:¬,trail:·
set wildmenu
set wildmode=full
set omnifunc=syntaxcomplete#Complete
set clipboard=unnamed
set cursorline
set cursorcolumn
set cm=blowfish
set undofile
set undodir=~/.vim/undo
set shell=zsh
set linespace=0 " For Airline
set mouse=a

nnoremap Y y$

noremap <silent> <Right> <c-w>l
noremap <silent> <Left> <c-w>h
noremap <silent> <Up> <c-w>k
noremap <silent> <Down> <c-w>j

let mapleader = ' '
noremap <silent><leader>q :Dash<CR>
noremap <leader>f :Unite buffer file_rec/async -start-insert<CR>
noremap <silent> <leader>c mpgg=G<CR>:%s/\s\+$//g<CR>`p
noremap <leader>d :NERDTreeToggle<CR>
noremap <leader>c :NERDTreeCWD<CR>
noremap <leader>b :Unite buffer -start-insert<CR>
noremap <leader>t :TlistToggle<CR>
noremap <leader>u :GundoToggle<CR>
noremap <leader>w :w<CR>
noremap <leader>s :Ag<space>
noremap <leader>$ :setlocal spell! spelllang=en_us<CR>
noremap <leader>; :UltiSnipsEdit<CR>
noremap <leader>. :e ~/.vimrc<CR>

nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

syntax enable
colorscheme badwolf

hi Normal ctermbg=none
hi Nontext ctermbg=none

" Clear the search buffer when hitting return
function! MapCR()
  nnoremap <leader><cr> :nohlsearch<cr>
endfunction
call MapCR()

" Use space to toggle folds
"nnoremap <space> za
nnoremap <leader>z za
vnoremap <leader>z zf

" Make vim very magic
" nnoremap / /\v

" CtrlP
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" Snippets
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-l>"
let g:UltiSnipsJumpBackwardTrigger="<c-h>"
let g:UltiSnipsListSnippets="<c-k>"

source ~/.vimrc.scimed

NeoBundleCheck
